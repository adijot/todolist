{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","state","toDoItems","find","item","action","done","changeStateData","userName","toggleTodo","todo","map","todoTableRows","type","checked","onChange","userLastName","className","this","filter","t","length","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAIqBA,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYVC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAd1B,EAiBnBC,cAAgB,WACP,EAAKC,MAAMC,UAAUC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SAAW,EAAKJ,MAAMJ,gBAC9D,EAAKD,SAAS,CACVM,UAAU,GAAD,mBAAM,EAAKD,MAAMC,WAAjB,CAA4B,CAACG,OAAQ,EAAKJ,MAAMJ,YAAaS,MAAM,KAC5ET,YAAa,MArBN,EA0BnBU,gBAAkB,WACd,EAAKX,SAAS,CACNY,SAAkC,SAAxB,EAAKP,MAAMO,SAAsB,OAAS,UA5B7C,EAiCnBC,WAAa,SAACC,GAAD,OAAU,EAAKd,SAAS,CACjCM,UACI,EAAKD,MAAMC,UAAUS,KAAI,SAAAP,GAAI,OAAIA,EAAKC,SAAWK,EAAKL,OAArB,2BACvBD,GADuB,IACjBE,MAAOF,EAAKE,OAAQF,QApCzB,EAuCnBQ,cAAgB,kBAAM,EAAKX,MAAMC,UAAUS,KAAI,SAAAP,GAAI,OAC/C,+BACI,6BAAKA,EAAKC,SACV,6BACI,uBAAOQ,KAAK,WAAWC,QAASV,EAAKE,KAC9BS,SAAU,kBAAM,EAAKN,WAAWL,UAJtCA,EAAKC,YAtCd,EAAKJ,MAAQ,CACTO,SAAU,OACVQ,aAAc,WACdd,UAAW,CAAC,CAACG,OAAQ,qBAAiBC,MAAM,GACxC,CAACD,OAAQ,uBAAcC,MAAM,GAC7B,CAACD,OAAQ,qBAAiBC,MAAM,GAChC,CAACD,OAAQ,0BAAsBC,MAAM,IACzCT,YAAa,IATF,E,0CAgDnB,WACI,OACI,gCACI,qBAAIoB,UAAU,wCAAd,+CAC6BC,KAAKjB,MAAMO,SADxC,uBAEoBU,KAAKjB,MAAMC,UAAUiB,QAAO,SAAAC,GAAC,OAAKA,EAAEd,QAAMe,OAF9D,IAGI,wBAAQJ,UAAU,sBACVK,QAASJ,KAAKX,gBADtB,2BAMJ,sBAAKU,UAAU,kBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,uBAAOA,UAAU,eAAelB,MAAOmB,KAAKjB,MAAMJ,YAC3CkB,SAAUG,KAAKxB,qBACtB,wBAAQuB,UAAU,uBAAuBK,QAASJ,KAAKlB,cAAvD,sBAEN,wBAAOiB,UAAU,qCAAjB,UACE,gCACA,+BAAI,sCAAa,gDAEjB,gCAAQC,KAAKN,+B,GAxEAW,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bdde426a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n// import logo from './logo.svg';\n// import './App.css';\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: \"Adam\",\n            userLastName: \"Janiczek\",\n            toDoItems: [{action: \"Kupić kawiaty\", done: false},\n                {action: \"Wziąć buty\", done: false},\n                {action: \"Zebrać bilety\", done: true},\n                {action: \"Zadzwonić do Jurka\", done: false}],\n            newItemText: \"\"\n        }\n    }\n\n    updateNewTextValue = (event) => {\n        this.setState({newItemText: event.target.value})\n    }\n\n    createNewTodo = () => {\n        if (!this.state.toDoItems.find(item => item.action === this.state.newItemText)) {\n            this.setState({\n                toDoItems: [...this.state.toDoItems, {action: this.state.newItemText, done: false}],\n                newItemText: \"\"\n            });\n        }\n    }\n\n    changeStateData = () => {\n        this.setState({\n                userName: this.state.userName === \"Arek\" ? \"Adam\" : \"Arek\"\n            }\n        )\n    }\n\n    toggleTodo = (todo) => this.setState({\n        toDoItems:\n            this.state.toDoItems.map(item => item.action === todo.action\n                ? {...item, done: !item.done} : item)\n    });\n\n    todoTableRows = () => this.state.toDoItems.map(item =>\n        <tr key={item.action}>\n            <td>{item.action}</td>\n            <td>\n                <input type=\"checkbox\" checked={item.done}\n                       onChange={() => this.toggleTodo(item)}/>\n            </td>\n        </tr>);\n\n    render() {\n        return (\n            <div>\n                <h4 className=\"bg-primary text-white text-center p-2\">\n                    Lista zadań użytkownika {this.state.userName}\n                    (Liczba zadań: {this.state.toDoItems.filter(t => !t.done).length})\n                    <button className=\"btn btn-primary m-2\"\n                            onClick={this.changeStateData}>\n                        Zmień\n                    </button>\n                </h4>\n\n                <div className=\"container-fluid\">\n                    <div className=\"my-1\">\n                        <input className=\"form-control\" value={this.state.newItemText}\n                               onChange={this.updateNewTextValue}/>\n                        <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>Dodaj</button>\n                    </div>\n                  <table className=\"table table-striped table-bordered\">\n                    <thead>\n                    <tr><th>Opis</th><th>Wykonanie</th></tr>\n                    </thead>\n                    <tbody>{this.todoTableRows()}</tbody>\n                  </table>\n                </div>\n            </div>\n        )\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}